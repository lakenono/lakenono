/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lakenono.auth;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-14")
public class AuthService {

	public interface Iface {
		
		public Map<String, String> getAuthData(String domain, String clientIp) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void getAuthData(String domain, String clientIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public Map<String, String> getAuthData(String domain, String clientIp) throws org.apache.thrift.TException {
			send_getAuthData(domain, clientIp);
			return recv_getAuthData();
		}

		public void send_getAuthData(String domain, String clientIp) throws org.apache.thrift.TException {
			getAuthData_args args = new getAuthData_args();
			args.setDomain(domain);
			args.setClientIp(clientIp);
			sendBase("getAuthData", args);
		}

		public Map<String, String> recv_getAuthData() throws org.apache.thrift.TException {
			getAuthData_result result = new getAuthData_result();
			receiveBase(result, "getAuthData");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAuthData failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void getAuthData(String domain, String clientIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			getAuthData_call method_call = new getAuthData_call(domain, clientIp, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getAuthData_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String domain;
			private String clientIp;

			public getAuthData_call(String domain, String clientIp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.domain = domain;
				this.clientIp = clientIp;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAuthData", org.apache.thrift.protocol.TMessageType.CALL, 0));
				getAuthData_args args = new getAuthData_args();
				args.setDomain(domain);
				args.setClientIp(clientIp);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Map<String, String> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getAuthData();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getAuthData", new getAuthData());
			return processMap;
		}

		public static class getAuthData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAuthData_args> {
			public getAuthData() {
				super("getAuthData");
			}

			public getAuthData_args getEmptyArgsInstance() {
				return new getAuthData_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getAuthData_result getResult(I iface, getAuthData_args args) throws org.apache.thrift.TException {
				getAuthData_result result = new getAuthData_result();
				result.success = iface.getAuthData(args.domain, args.clientIp);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("getAuthData", new getAuthData());
			return processMap;
		}

		public static class getAuthData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAuthData_args, Map<String, String>> {
			public getAuthData() {
				super("getAuthData");
			}

			public getAuthData_args getEmptyArgsInstance() {
				return new getAuthData_args();
			}

			public AsyncMethodCallback<Map<String, String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Map<String, String>>() {
					public void onComplete(Map<String, String> o) {
						getAuthData_result result = new getAuthData_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						getAuthData_result result = new getAuthData_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getAuthData_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String, String>> resultHandler) throws TException {
				iface.getAuthData(args.domain, args.clientIp, resultHandler);
			}
		}

	}

	public static class getAuthData_args implements org.apache.thrift.TBase<getAuthData_args, getAuthData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAuthData_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAuthData_args");

		private static final org.apache.thrift.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("domain", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIp", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getAuthData_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getAuthData_argsTupleSchemeFactory());
		}

		public String domain; // required
		public String clientIp; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			DOMAIN((short) 1, "domain"), CLIENT_IP((short) 2, "clientIp");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // DOMAIN
					return DOMAIN;
				case 2: // CLIENT_IP
					return CLIENT_IP;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("domain", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("clientIp", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAuthData_args.class, metaDataMap);
		}

		public getAuthData_args() {
		}

		public getAuthData_args(String domain, String clientIp) {
			this();
			this.domain = domain;
			this.clientIp = clientIp;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAuthData_args(getAuthData_args other) {
			if (other.isSetDomain()) {
				this.domain = other.domain;
			}
			if (other.isSetClientIp()) {
				this.clientIp = other.clientIp;
			}
		}

		public getAuthData_args deepCopy() {
			return new getAuthData_args(this);
		}

		@Override
		public void clear() {
			this.domain = null;
			this.clientIp = null;
		}

		public String getDomain() {
			return this.domain;
		}

		public getAuthData_args setDomain(String domain) {
			this.domain = domain;
			return this;
		}

		public void unsetDomain() {
			this.domain = null;
		}

		/**
		 * Returns true if field domain is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetDomain() {
			return this.domain != null;
		}

		public void setDomainIsSet(boolean value) {
			if (!value) {
				this.domain = null;
			}
		}

		public String getClientIp() {
			return this.clientIp;
		}

		public getAuthData_args setClientIp(String clientIp) {
			this.clientIp = clientIp;
			return this;
		}

		public void unsetClientIp() {
			this.clientIp = null;
		}

		/**
		 * Returns true if field clientIp is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetClientIp() {
			return this.clientIp != null;
		}

		public void setClientIpIsSet(boolean value) {
			if (!value) {
				this.clientIp = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case DOMAIN:
				if (value == null) {
					unsetDomain();
				} else {
					setDomain((String) value);
				}
				break;

			case CLIENT_IP:
				if (value == null) {
					unsetClientIp();
				} else {
					setClientIp((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case DOMAIN:
				return getDomain();

			case CLIENT_IP:
				return getClientIp();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case DOMAIN:
				return isSetDomain();
			case CLIENT_IP:
				return isSetClientIp();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getAuthData_args)
				return this.equals((getAuthData_args) that);
			return false;
		}

		public boolean equals(getAuthData_args that) {
			if (that == null)
				return false;

			boolean this_present_domain = true && this.isSetDomain();
			boolean that_present_domain = true && that.isSetDomain();
			if (this_present_domain || that_present_domain) {
				if (!(this_present_domain && that_present_domain))
					return false;
				if (!this.domain.equals(that.domain))
					return false;
			}

			boolean this_present_clientIp = true && this.isSetClientIp();
			boolean that_present_clientIp = true && that.isSetClientIp();
			if (this_present_clientIp || that_present_clientIp) {
				if (!(this_present_clientIp && that_present_clientIp))
					return false;
				if (!this.clientIp.equals(that.clientIp))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_domain = true && (isSetDomain());
			list.add(present_domain);
			if (present_domain)
				list.add(domain);

			boolean present_clientIp = true && (isSetClientIp());
			list.add(present_clientIp);
			if (present_clientIp)
				list.add(clientIp);

			return list.hashCode();
		}

		@Override
		public int compareTo(getAuthData_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetDomain()).compareTo(other.isSetDomain());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetDomain()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain, other.domain);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetClientIp()).compareTo(other.isSetClientIp());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClientIp()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIp, other.clientIp);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getAuthData_args(");
			boolean first = true;

			sb.append("domain:");
			if (this.domain == null) {
				sb.append("null");
			} else {
				sb.append(this.domain);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clientIp:");
			if (this.clientIp == null) {
				sb.append("null");
			} else {
				sb.append(this.clientIp);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAuthData_argsStandardSchemeFactory implements SchemeFactory {
			public getAuthData_argsStandardScheme getScheme() {
				return new getAuthData_argsStandardScheme();
			}
		}

		private static class getAuthData_argsStandardScheme extends StandardScheme<getAuthData_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAuthData_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // DOMAIN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.domain = iprot.readString();
							struct.setDomainIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CLIENT_IP
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.clientIp = iprot.readString();
							struct.setClientIpIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAuthData_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.domain != null) {
					oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
					oprot.writeString(struct.domain);
					oprot.writeFieldEnd();
				}
				if (struct.clientIp != null) {
					oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
					oprot.writeString(struct.clientIp);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAuthData_argsTupleSchemeFactory implements SchemeFactory {
			public getAuthData_argsTupleScheme getScheme() {
				return new getAuthData_argsTupleScheme();
			}
		}

		private static class getAuthData_argsTupleScheme extends TupleScheme<getAuthData_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAuthData_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetDomain()) {
					optionals.set(0);
				}
				if (struct.isSetClientIp()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetDomain()) {
					oprot.writeString(struct.domain);
				}
				if (struct.isSetClientIp()) {
					oprot.writeString(struct.clientIp);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAuthData_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.domain = iprot.readString();
					struct.setDomainIsSet(true);
				}
				if (incoming.get(1)) {
					struct.clientIp = iprot.readString();
					struct.setClientIpIsSet(true);
				}
			}
		}

	}

	public static class getAuthData_result implements org.apache.thrift.TBase<getAuthData_result, getAuthData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAuthData_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAuthData_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getAuthData_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getAuthData_resultTupleSchemeFactory());
		}

		public Map<String, String> success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAuthData_result.class, metaDataMap);
		}

		public getAuthData_result() {
		}

		public getAuthData_result(Map<String, String> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAuthData_result(getAuthData_result other) {
			if (other.isSetSuccess()) {
				Map<String, String> __this__success = new HashMap<String, String>(other.success);
				this.success = __this__success;
			}
		}

		public getAuthData_result deepCopy() {
			return new getAuthData_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public void putToSuccess(String key, String val) {
			if (this.success == null) {
				this.success = new HashMap<String, String>();
			}
			this.success.put(key, val);
		}

		public Map<String, String> getSuccess() {
			return this.success;
		}

		public getAuthData_result setSuccess(Map<String, String> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Map<String, String>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getAuthData_result)
				return this.equals((getAuthData_result) that);
			return false;
		}

		public boolean equals(getAuthData_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getAuthData_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getAuthData_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAuthData_resultStandardSchemeFactory implements SchemeFactory {
			public getAuthData_resultStandardScheme getScheme() {
				return new getAuthData_resultStandardScheme();
			}
		}

		private static class getAuthData_resultStandardScheme extends StandardScheme<getAuthData_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAuthData_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
								struct.success = new HashMap<String, String>(2 * _map0.size);
								String _key1;
								String _val2;
								for (int _i3 = 0; _i3 < _map0.size; ++_i3) {
									_key1 = iprot.readString();
									_val2 = iprot.readString();
									struct.success.put(_key1, _val2);
								}
								iprot.readMapEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAuthData_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
						for (Map.Entry<String, String> _iter4 : struct.success.entrySet()) {
							oprot.writeString(_iter4.getKey());
							oprot.writeString(_iter4.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAuthData_resultTupleSchemeFactory implements SchemeFactory {
			public getAuthData_resultTupleScheme getScheme() {
				return new getAuthData_resultTupleScheme();
			}
		}

		private static class getAuthData_resultTupleScheme extends TupleScheme<getAuthData_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAuthData_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (Map.Entry<String, String> _iter5 : struct.success.entrySet()) {
							oprot.writeString(_iter5.getKey());
							oprot.writeString(_iter5.getValue());
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAuthData_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.success = new HashMap<String, String>(2 * _map6.size);
						String _key7;
						String _val8;
						for (int _i9 = 0; _i9 < _map6.size; ++_i9) {
							_key7 = iprot.readString();
							_val8 = iprot.readString();
							struct.success.put(_key7, _val8);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
